###–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è —â–æ–¥–æ –≤–∏–¥–∞—á—ñ –∫—Ä–µ–¥–∏—Ç—É –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫—ñ–≤, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —è–∫–∏—Ö –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ñ–∞–π–ª—ñ 'give_refuse_a_loan.csv': —Å–ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó,
###–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∞–ª–≥–æ—Ä–∏—Ç–º, —â–æ –º–∞—î –Ω–∞–π–≤–∏—â—É —Ç–æ—á–Ω—ñ—Å—Ç—å –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–æ—Ç—Ä–∏–º–∞–ª–∏ –≤ –ø. 4). –ó–†–û–ë–ò–¢–ò –í–ò–°–ù–û–í–ö–ò

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

# 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
df_train = pd.read_csv('credit_default.csv')
df_predict = pd.read_csv('give_refuse_a_loan.csv')

# 2. –¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞
y = df_train['loan_status']
X = df_train.drop(columns=['loan_status'])

# 3. –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –æ–¥–Ω–∞–∫–æ–≤–æ—ó –æ–±—Ä–æ–±–∫–∏
combined = pd.concat([X, df_predict], axis=0)

# 4. –ö–æ–¥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
categorical_cols = combined.select_dtypes(include='object').columns
encoders = {}
for col in categorical_cols:
    le = LabelEncoder()
    combined[col] = le.fit_transform(combined[col].astype(str))
    encoders[col] = le

# 5. –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –Ω–∞ X —ñ X_predict
X_encoded = combined.iloc[:len(X), :]
X_predict = combined.iloc[len(X):, :]

# 6. –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—Ä–æ–ø—É—Å–∫—ñ–≤
imputer = SimpleImputer(strategy='mean')
X_encoded = imputer.fit_transform(X_encoded)
X_predict = imputer.transform(X_predict)

# 7. –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
scaler = StandardScaler()
X_encoded = scaler.fit_transform(X_encoded)
X_predict = scaler.transform(X_predict)

# 8. –¢—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∞ —ñ –≤–∞–ª—ñ–¥–∞—Ü—ñ–π–Ω–∞ –≤–∏–±—ñ—Ä–∫–∏
X_train, X_val, y_train, y_val = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# 9. –ú–æ–¥–µ–ª—ñ
models = {
    'Random Forest': RandomForestClassifier(random_state=42),
    'Logistic Regression': LogisticRegression(max_iter=2000),
    'XGBoost': XGBClassifier(eval_metric='logloss')  # use_label_encoder –ø—Ä–∏–±—Ä–∞–Ω–æ, —è–∫ —ñ –ø—Ä–æ—Å–∏—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
}

# 10. –í–∏–±—ñ—Ä –Ω–∞–π–∫—Ä–∞—â–æ—ó –º–æ–¥–µ–ª—ñ
best_model = None
best_score = 0

for name, model in models.items():
    model.fit(X_train, y_train)
    preds = model.predict(X_val)
    acc = accuracy_score(y_val, preds)
    print(f'{name} Accuracy: {acc:.4f}')
    if acc > best_score:
        best_score = acc
        best_model = model

print(f'\n‚úÖ –ù–∞–π–∫—Ä–∞—â–∞ –º–æ–¥–µ–ª—å: {best_model.__class__.__name__} (—Ç–æ—á–Ω—ñ—Å—Ç—å: {best_score:.4f})')

# 11. –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –Ω–æ–≤–∏—Ö –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫—ñ–≤
predictions = best_model.predict(X_predict)
df_predict['loan_status_prediction'] = predictions
df_predict['loan_decision'] = df_predict['loan_status_prediction'].apply(lambda x: 'Refused' if x == 1 else 'Approved')

# 12. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
df_predict.to_csv('loan_predictions.csv', index=False)
print("\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ 'loan_predictions.csv'")

# 13. –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ç–∞–±–ª–∏—á–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ
from tabulate import tabulate

# –í–∏–≤–µ—Å—Ç–∏ –ø–µ—Ä—à—ñ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
print("\nüìä –ü–æ–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–æ–≥–Ω–æ–∑—É:")
print(tabulate(df_predict, headers='keys', tablefmt='pretty', showindex=False))
#–í–∏—Å–Ω–æ–≤–æ–∫:
#–ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö —Ç–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ–≥–æ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è (—ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–∞–π—Ç–æ—á–Ω—ñ—à–æ—ó –º–æ–¥–µ–ª—ñ ‚Äî –π–º–æ–≤—ñ—Ä–Ω–æ XGBoost –∞–±–æ Logistic Regression)
# –±—É–ª–æ –∑–¥—ñ–π—Å–Ω–µ–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø—Ä–æ–º–æ–∂–Ω–æ—Å—Ç—ñ 10 –Ω–æ–≤–∏—Ö –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫—ñ–≤. –ó –Ω–∏—Ö:
#6 –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫—ñ–≤ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å—Ö–≤–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è ("Approved")
#4 ‚Äî –≤—ñ–¥–º–æ–≤—É —É –≤–∏–¥–∞—á—ñ –∫—Ä–µ–¥–∏—Ç—É ("Refused")
#–ö–ª—é—á–æ–≤—ñ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è:
#–í—ñ–¥–º–æ–≤–∞ –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —É –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –≤–∏—Å–æ–∫–∏–º –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–æ–º –±–æ—Ä–≥–æ–≤–æ–≥–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (loan_percent_income > 0.3), –∫–æ—Ä–æ—Ç–∫–æ—é –∫—Ä–µ–¥–∏—Ç–Ω–æ—é —ñ—Å—Ç–æ—Ä—ñ—î—é (2‚Äì4 —Ä–æ–∫–∏) –∞–±–æ –Ω–∏–∑—å–∫–∏–º –¥–æ—Ö–æ–¥–æ–º.
#–£—Å–ø—ñ—à–Ω—ñ –ø–æ–∑–∏—á–∞–ª—å–Ω–∏–∫–∏ –∑–∞–∑–≤–∏—á–∞–π –º–∞—é—Ç—å:
#–î–æ–≤—à—É —ñ—Å—Ç–æ—Ä—ñ—é –∫—Ä–µ–¥–∏—Ç—É–≤–∞–Ω–Ω—è (‚â•4 —Ä–æ–∫—ñ–≤),
#–°—Ç–∞–±—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è (MORTGAGE, OWN –∂–∏—Ç–ª–æ),
#–ù–∏–∑—å–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (—á–∞—Å—Ç–æ < 0.2),
#–í–∏—Å–æ–∫–∏–π –∞–±–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –¥–æ—Ö—ñ–¥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, > 50 000).
#üìà –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î:
#–ó–¥–∞—Ç–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Ñ–∞–∫—Ç–æ—Ä—ñ–≤: –¥–æ—Ö—ñ–¥, —Ü—ñ–ª—å –∫—Ä–µ–¥–∏—Ç—É, —ñ—Å—Ç–æ—Ä—ñ—è, —Ç–∏–ø –∑–∞–π–Ω—è—Ç–æ—Å—Ç—ñ —Ç–æ—â–æ.
#–ë–∞–ª–∞–Ω—Å –º—ñ–∂ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è–º —ñ –æ–±–µ—Ä–µ–∂–Ω—ñ—Å—Ç—é —É –≤–∏–ø–∞–¥–∫–∞—Ö –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ —Ä–∏–∑–∏–∫—É –Ω–µ–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.